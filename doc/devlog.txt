Project 0 DEVLOG

emoryW -- 2019-10-18 8:31
  - Added noobpedia's submodule, created devlog file and added to README
  - Starting our design doc

kevinL -- 2019-10-19 11:39
  - Added a site map

kevinL -- 2019-10-20 18:35
  - Added database organization layout

emoryW -- 2019-10-20 15:45
  - Kevin working on sitemap/database layouts
  - Raymond working on component map
  - Emory working on component descriptions/database layouts

kevinL - 2019-10-20 22:35
  - Added component map
  - Printing out three hardcopies

emoryW - 2019-10-21 20:00
  - New version (v1) of design doc
    - Updated database table structure so all story updates are added to one table instead of having a separate table for each story
    - Added that Raymond will be making the HTML templates

kevinL - 2019-10-21 20:31
  - Changes to design doc
    - Removed establishing a session during registration - don't want that
    - Handle the case where a title is invalid so you don't lose all the text you had
    - Specify that story edits show up on a user's homepage

emoryW - 2019-10-21 21:00
  - Wow that's an intense article. It shows how the world of CS really can be crazy.
  - Everyone just does what they can to get by and says they'll go back and fix it later.
  - I think that it's necessary to have other hobbies if you want to get into this world so you don't drive yourself crazy.
  - Our team has a few protocols/procedures that we plan to follow so we make our time together as easy and stressless as possible.
      - Communicating when we have an issue. We want to be a team that instead of cutting corners and hacking out answers, we can talk to each other and come up with a better solution.
      - Before finalizing any code, we're each going to look over each other's work to make sure that everything is understandable.
      - Finally, we plan to really stress the use of comments in our code. Comments make it easier on all of us, so we know if there are any rough patches to fix or just  a small explanation to guide us.
      
kevinL - 2019-10-21 21:30
  SQLite operations
  - JOIN operations are used to query data from two or more tables.
  - INNER JOIN
    - Matches every row from one table with every row from another table where the join condition specified after the ON keyword is true (using foreign keys).
    - For our purposes: both the StoryTitles and StoryUpdates table have a "Title" column. The latter doesn't track the creator of a story. We can remedy that by matching rows that have the same title between the two tables, then combine them together. Then we get a single "set" that has the creator column in addition to the columns already present in the StoryUpdates table. 
  - LEFT JOIN
    - Same as INNER JOIN except every single row from the "left" table is included. If no rows from the "right" table being joined to the left table matches (via the join condition), NULL is in place of the row. 
    - This means that you can specifically find rows that don't match by adding a WHERE clause: WHERE (column) is NULL.
    - This should only be useful if we allow users to submit nothing to forms (e.g. not having a password, not submitting any text when creating or updating a story, etc.)
  - CROSS JOIN
    - Does not use a join condition
    - Combines every row from the first table with every row from the second table to form the result set. 
    - If the first table has N rows, the second table has M rows, the final result has N x M rows. 
    - Basically makes every combination possible out of the columns of the selected tables.
    - Don't see how this would be useful for our project. 
 
rayL - 2019-10-22 00:12
  -JOIN operations
    -can be used to structure data more efficiently for different uses. ex: merging the storyTitles and storyUpdates tables to show the activity of a user: the stories they have created and the stories they edited; as opposed to merging both tables based on the title of the story and creating a list of users that have interacted with the story. The first option centers the story interaction data around the user and the second centers the users' data around the stories they interact with.
  -CROSS JOIN
    -can be used to create a copy of a newly posted story for each user, so they can edit their own "version" of the story separate from other users. The table would increase by n rows each time a story is created, for n users in the database.
